#!/usr/bin/env python3
import os
import sys
import argparse
import os.path
import sys
import pexpect
import subprocess
from shutil import which


def exists(program):
    return which(program) is not None


def parse_jlivecd_config(conf_file):
    var_dict = {}
    with open(conf_file, 'r') as file:
        for line in file:
            if line[0].isalpha():
                key_value_pair = line.split('=')
                if key_value_pair[1][-1] == '\n':
                    key_value_pair[1] = key_value_pair[1][:-1]            # Discard the newline character
                if key_value_pair[1][0] == '\"' or key_value_pair[1][0] == '\'':
                    var_dict.update({key_value_pair[0] : key_value_pair[1][1:-1]})
                else:
                    var_dict.update({key_value_pair[0] : key_value_pair[1]})
    return var_dict


class JlivecdWrapper:
    def __init__(self, project_full_path, iso_full_path='', jlivecd_conf_file='config.conf', osmode='debian', imagename='custom_iso', new_project=True, cmdline_args=False, args=None):
        self.jlivecd_args = { 'OS': osmode, 'IMAGENAME': imagename, 'CHROOT': 'chroot ./edit /bin/bash' }
        if new_project:
            self.jlivecd_args.update({'NEW_PROJECT': 'y'})
        else:
            self.jlivecd_args.update({'NEW_PROJECT': 'n'})

        self.is_new = new_project
        if iso_full_path is not '':
            self.iso = iso_full_path
        self.project_path = project_full_path

        if not cmdline_args:
            conf = ''
            if os.path.isfile(jlivecd_conf_file):
                conf = jlivecd_conf_file
            else:
                if os.path.isfile(os.path.join(self.project_path, 'config.conf')):
                    conf = os.path.join(self.project_path, 'config.conf')
                    print("[!] {0} not found. Trying to use the project default configuration file\n"
                          .format(jlivecd_conf_file))
                else:
                    raise FileNotFoundError('Cannot find a valid configuration file.')
            self.jlivecd_args.update(parse_jlivecd_config(conf))
        else:
            self.jlivecd_args.update(args)

    def execute(self):
        jlc = None
        if self.jlivecd_args['OS'] == 'debian':
            jlc = pexpect.spawnu('sudo JLstart -db', timeout=None)
        # elif self.jlivecd_args['OS'] == 'arch':
        #     jlc = pexpect.spawn('sudo JLstart -al')
        # elif self.jlivecd_args['OS'] == 'ubuntu':
        #     jlc = pexpect.spawn('sudo JLstart -ub')

        if jlc is None:
            raise Exception('Cannot execute JLIVECD.')

        jlc.logfile = sys.stdout

        jlc.expect("=== Is this a new project: \(y/n\)\?: ")
        jlc.sendline(self.jlivecd_args['NEW_PROJECT'])

        if self.is_new:
            jlc.expect("=== Where do you want to save your project \?.+?Enter path: ")
            jlc.sendline(self.project_path)

            jlc.expect("=== Enter.+?iso image: ")
            jlc.sendline(self.iso)

        else:
            jlc.expect('=== Enter the directory path where you have saved your project: ')
            jlc.sendline(self.project_path)

        jlc.expect("=== Enter.+?cd/dvd name \(default '(.+?)*'\): ")
        jlc.sendline(self.jlivecd_args['IMAGENAME'])

        # Change chroot command during execution to prevent errors
        if 'CHROOT' not in parse_jlivecd_config(os.path.join(self.project_path, 'config.conf')).keys():
            with open(os.path.join(self.project_path, 'config.conf'), 'w') as config:
                config.write("{0}={1}".format('CHROOT', self.jlivecd_args['CHROOT']))

        jlc.expect("=== Enable access control.+?")
        jlc.sendline(self.jlivecd_args['XHOST'])

        jlc.expect("=== Rebuild initramfs.+?")
        jlc.sendline('n')

        jlc.expect("=== Retain home directory.+?")
        jlc.sendline(self.jlivecd_args['RETAINHOME'])

        jlc.expect("=== Use fast compression.+?")
        jlc.sendline(self.jlivecd_args['FASTCOMPRESSION'])

        jlc.expect("=== Want UEFI image.+?")
        jlc.sendline(self.jlivecd_args['UEFI'])

        jlc.expect("=== Prevent hybrid image.+?")
        jlc.sendline(self.jlivecd_args['NOHYBRID'])

        jlc.expect(["\*\*\* END \*\*\*", "Press enter to exit"])
        if self.jlivecd_args['UEFI'] == 'y':
            if exists("xorriso"):
                extracted_files_path = os.path.join(self.project_path, "extracted")
                final_iso_path = os.path.join(self.project_path, self.jlivecd_args["IMAGENAME"] + ".iso")

                os.chdir(extracted_files_path)
                if exists('xorriso') and exists('isohybrid'):
                    xorriso = subprocess.Popen("xorriso -as mkisofs -no-emul-boot -boot-load-size 4 -boot-info-table" +
                                               "-iso-level 4 -b isolinux/isolinux.bin -c isolinux/boot.cat " +
                                               "-eltorito-alt-boot -e boot/grub/efi.img -no-emul-boot -o {0}.iso ."
                                               .format(final_iso_path))
                    xorriso.wait()
                    if xorriso.returncode == 0:
                        isohybrid = subprocess.Popen("isohybrid --uefi {0}"
                                                     .format(self.jlivecd_args['IMAGENAME'] + '.iso'))
                        isohybrid.wait()
                        if isohybrid.returncode != 0:
                            raise OSError("isohybrid failed to work on {0}"
                                          .format(self.jlivecd_args['IMAGENAME'] + '.iso'))
                    else:
                        raise OSError("xorriso failed to create the image.")
                else:
                    raise OSError("xorriso and/or isohybrid do not appear to be installed on your system.\n" +
                                  "Please install them before executing the script.")
        jlc.sendline("\n")
        jlc.close()

    def write_configuration(self, path=''):
        conf_path = ''
        if path == '':
            conf_path = os.path.join(self.project_path, 'config.conf')
        else:
            conf_path = path
        with open(conf_path, 'w') as conf:
            for key, value in self.jlivecd_args:
                if ' ' in value:
                    conf.write("{0}='{1}'\n".format(key, value))
                else:
                    conf.write("{0}={1}\n".format(key, value))


if os.getuid() != 0:
    print("You must have root privileges in order to execute this script")
    sys.exit(1)

parser = argparse.ArgumentParser(description="F.A.L.C.E." +
                                             "Fondamentale Armamentario per la Lavorazione di Custom ISO per le Evenienze: " +
                                             "Build a custom ISO with JLIVECD without annoying interactive prompts")
parser.add_argument('-n', '--new', action='store_true',
                    help='Specify whether you are opening a new project or an existing one. The default value is False')
parser.add_argument('-c', '--conf', action='store', type=str, default='',
                    help='Specify a JLIVECD configuration file ' +
                         '(usually it is generated when you create a project, ' +
                         'but there are three example configuration files if you need them.' +
                         ' The default value is \'\'. ' +
                         'Note that using a configuration file will cause the script to ignore eventual ' +
                         'command line arguments.')
parser.add_argument('-l', '--label', action='store', type=str, default='falce',
                    help='Specify the ISO label (default is \'falce\'')
parser.add_argument('-a', '--access-control', dest='access_control', action='store_true',
                    help='Prevent access control. Doing it will prevent GUI apps to run. The default value is False')
parser.add_argument('-r', '--retain-home', dest='retain_home', action='store_false',
                    help='Keep the contents of the home folder when building the ISO. The default value is True')
parser.add_argument('-f', '--fast-compression', dest='fast_comp', action='store_true',
                    help='Use fast compression when build the squashfs live filesystem. Using it will produce a bigger ISO. The default value is False.')
parser.add_argument('-u', '--uefi', action='store_true',
                    help='Specify whether to build a UEFI image. The default value is False.')
parser.add_argument('-b', '--hybrid', action='store_true',
                    help='Specify whether to build a hybrid image (it means it can be booted from disk storage devices). The default value is False.')
parser.add_argument('-w', '--write-conf', dest='write_conf', action='store_true',
                    help='Write current settings to project config')
parser.add_argument('--verbose', '-v', action='count',
                    help='Specify the verbosity level')
parser.add_argument('project_path', action='store', type=str,
                    help='Specify the (FULL) path where your project is (or will be) saved. This is a required option')
parser.add_argument('iso_path', action='store', type=str, default='',
                    help='Specify the (FULL) path where the ISO you want to customize is stored. The default value is \'\'')

arguments = parser.parse_args()

if arguments.new and arguments.iso_path is '':
        print("A ISO image is required for a new project. Exiting...")
        sys.exit(1)

wrapper = None
if arguments.conf is not '':
    wrapper = JlivecdWrapper(project_full_path=arguments.project_path, iso_full_path=arguments.iso_path,
                             jlivecd_conf_file=arguments.conf, imagename=arguments.label, new_project=arguments.new)
else:
    args_dict = {
        'XHOST': 'y' if arguments.access_control else 'n',
        'RETAINHOME': 'y' if arguments.retain_home else 'n',
        'FASTCOMPRESSION': 'y' if arguments.fast_comp else 'n',
        'UEFI': 'y' if arguments.uefi else 'n',
        'NOHYBRID': 'n' if arguments.hybrid else 'y'
    }
    wrapper = JlivecdWrapper(project_full_path=arguments.project_path, iso_full_path=arguments.iso_path,
                             imagename=arguments.label, new_project=arguments.new, cmdline_args=True, args=args_dict)
wrapper.execute()

if arguments.write_conf:
    wrapper.write_configuration()
